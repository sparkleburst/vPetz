@page "/adoption"
@using vPetz.Data
@using vPetz.Data.Services
@inject IPetService PetService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@rendermode InteractiveServer // this makes the buttons work

<h3>Pets Available for Adoption</h3>

@if (availablePets is null)
{
    <p><em>Loading...</em></p>
}
else if (availablePets.Count == 0)
{
    <p>No pets available for adoption at this time.</p>
}
else
{
    <div class="row">
        @foreach (var pet in availablePets)
        {
            <div class="col-auto d-flex justify-content-center mb-4" style="min-width: 200px;">
                <div class="card pet-card" style="width: 200px;">
                    <div class="card-body text-center p-2">
                        <img src="@(string.IsNullOrEmpty(pet.ImageURL) ? "/images/default-pet.png" : pet.ImageURL)"
                             alt="@pet.Name" class="img-fluid" style="width: 100%; height: 200px; object-fit: cover;" />
                        <h5 class="mt-2">@pet.Name</h5>
                        <p>@pet.Type</p>
                        <p>A lovely @pet.Type.ToString().ToLower() looking for a home.</p>
                        <button class="btn btn-primary btn-sm mt-2" @onclick="() => AdoptPet(pet)">Adopt</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Pet> availablePets = new List<Pet>(); // Initialized as an empty list
    private string? currentUserName; // This will store the username of the currently logged-in user

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserName = authState.User.Identity?.Name; // Get the username from the identity

        availablePets = await PetService.GetAvailablePetsAsync();
    }

    private async Task AdoptPet(Pet pet)
    {
        Console.WriteLine($"Attempting to adopt pet: {pet.Name} by user: {currentUserName}");

        if (currentUserName != null)
        {
            try
            {
                Console.WriteLine($"Adopting pet: {pet.Name} by {currentUserName}"); // Additional debug output
                await PetService.AdoptPetAsync(pet, currentUserName);
                availablePets.Remove(pet);
                StateHasChanged(); // Update the UI

                Console.WriteLine("Navigating to my-pets page"); // Additional debug output
                NavigationManager.NavigateTo($"my-pets");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adopting pet: {ex.Message}"); // Log any exceptions that occur
            }
        }
        else
        {
            Console.WriteLine("Current user is not logged in."); // Debug output if no user is logged in
        }
    }
}
