@page "/my-pets"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@using vPetz.Data.Models

@inject NavigationManager NavigationManager
@inject IPetService PetService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer // this makes the buttons work

<h3 class="text-center">My Pets</h3>

@if (isLoading)
{
    <p>Loading your pets...</p>
}
else if (userPets == null || !userPets.Any())
{
    <p>You don't have any pets yet. <a href="/adoption">Adopt a pet now!</a></p>
}
else
{
    <div class="d-flex flex-wrap justify-content-center">
        @foreach (var pet in userPets)
        {
            <div class="card mb-4 mx-2" style="width: 200px;">
                <div class="card-body text-center p-2">
                    <img src="@(string.IsNullOrEmpty(pet.ImageURL) ? "/images/default-cat.webp" : pet.ImageURL)"
                         alt="@pet.Name" class="img-fluid" style="width: 100%; height: 200px; object-fit: cover;" />
                    <h4 class="mt-2">@pet.Name</h4>
                    <p>@pet.Description</p>
                    <div class="pet-stats">
                        <p>@PetService.GetPetFeeling(pet)</p>
                    </div>
                    <button class="btn btn-primary btn-sm mt-2" @onclick="() => InteractWithPet(pet.Id)">Interact</button>
                    <button class="btn btn-danger btn-sm mt-2" @onclick="() => DeletePet(pet.Id)">Delete</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Pet> userPets = new List<Pet>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserPets();
    }

    private async Task LoadUserPets()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var appUser = await UserManager.GetUserAsync(user);
            var userId = appUser?.Id;

            if (!string.IsNullOrEmpty(userId))
            {
                userPets = await PetService.GetUserPetsAsync(userId);
            }
        }

        isLoading = false;
    }

    private void InteractWithPet(int petId)
    {
        NavigationManager.NavigateTo($"/pet/{petId}");
    }

    private async Task DeletePet(int petId)
    {
        var pet = userPets.FirstOrDefault(p => p.Id == petId);
        if (pet != null)
        {
            bool isDeleted = await PetService.DeletePetAsync(petId);
            if (isDeleted)
            {
                userPets.Remove(pet);
                StateHasChanged();
                Console.WriteLine($"Pet {pet.Name} has been deleted.");
            }
        }
    }
}
